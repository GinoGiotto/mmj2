//********************************************************************/
//* Copyright (C) 2011  MEL O'CAT  mmj2 (via) planetmath (dot) org   */
//* License terms: GNU General Public License Version 2              */
//*                or any later version                              */
//********************************************************************/
//*4567890123456 (71-character line to adjust editor window) 23456789*/

/*
 *  MMJ2FailPopupWindow.java.java  0.01 11/01/2011
 *
 *  Nov-01-2011 - Version 0.01
 *          --> new
 */

package mmj.util;

import javax.swing.JOptionPane;

import mmj.lang.Messages;
import mmj.pa.AuxFrameGUI;
import mmj.pa.PaConstants;

/**
 *  <code>MMJ2FailPopupWindow</code> displays start-up and
 *  abnormal termination errors.
 *  <p>
 *  Here is an overview of how this works:
 *  <ol>
 *  <li><code>BatchFramework</code> obtains the
 *      <code>displayMMJ2FailPopupWindow</code>
 *      parameter from the command line arguments. If "Y" or
 *      not entered (default), and during command line processing,
 *      the <code>MMJ2FailPopupWindow</code> is used to display
 *      fail (abort) errors and error messages generated during
 *      "startup" -- meaning prior to the Proof Assistant GUI display.
 *  <li><code>BatchFramework.runIt()</code> checks for "fail"
 *      errors and calls <code>MMJ2FailPopupWindow.displayFailMessage()</code>
 *      to display the final message from mmj2 :-)
 *  <li><code>OutputBoss.printAndClearMessages()</code>, which is
 *      used by the various <code>mmj.util.*Boss</code> classes to
 *      output errors generated by RunParm processing, calls
 *      <code>accumStartupErrors()</code> and <code>displayStartupErrors</code>
 *      in <code>MMJ2FailPopupWindow</code>. There are two functions
 *      because we want the messages to also be output to the
 *      Command Prompt window but that process deletes the messages.
 *      So we gather them first, and then later display them.
 *  <li>The other "tricky" thing is knowing what is a "startup"
 *      error message versus a "non-startup" messages. For that
 *      the <code>startupMode</code> boolean variable is used.
 *      Initially, right after the command line arguments are
 *      parsed, <code>BatchFramework.runIt()</code> calls
 *      <code>initiateStartupMode()</code> and then later, in
 *      <code>ProofAsstBoss.doRunProofAsstGUI()</code> calls
 *      <code>terminateStartupMode()</code>.
 */
public class MMJ2FailPopupWindow {

    private final BatchFramework batchFramework;

    private boolean enabled;

    private boolean startupMode = false;

    private String startupErrors = null;

    private AuxFrameGUI auxFrameGUI;

    /**
     *  Standard constructor.
     *
     *  @param batchFramework The <code>BatchFramework</code> object.
     *  @param enabled true to enable display of the popup
     *            window, otherwise false.
     */
    public MMJ2FailPopupWindow(final BatchFramework batchFramework,
        final boolean enabled)
    {

        this.batchFramework = batchFramework;
        setEnabled(enabled);
    }

    /**
     *  Sets <code>enabled</code> switch to turn on/off
     *  display of the <code>MMJ2FailPopupWindow</code>.
     *  <p>
     *  @param enabled true to enable display of the popup
     *            window, otherwise false.
     */
    public void setEnabled(final boolean enabled) {
        this.enabled = enabled;
    }

    /**
     *  Sets startupMode to <code>true</code> and initializes
     *  related variables.
     */
    public void initiateStartupMode() {
        startupErrors = null;
        if (enabled)
            startupMode = true;
    }

    /**
     *  Ends startupMode so that only Fail messages
     *  are shown.
     */
    public void terminateStartupMode() {
        startupMode = false;
        startupErrors = null;
    }

    /**
     *  Displays a <code>JOptionPane</code> Dialog
     *  showing the <code>failMessage</code>.
     *  <p>
     *  Note: if <code>MMJ2FailPopupWindow</code> is
     *        not <code>enabled</code> the Dialog
     *        is not shown.
     *  <p>
     *  @param failMessage the final mmj2 message before
     *         abnormal termination of processing.
     */
    public void displayFailMessage(final String failMessage) {
        if (!enabled)
            return;

        showAuxFrameGUI();

        JOptionPane.showMessageDialog(auxFrameGUI.getFrame(),
            addLineBreaks(failMessage), UtilConstants.MMJ2_FAIL_DIALOG_TITLE
                + " " + batchFramework.getRunParmFileAbsolutePath(),

            JOptionPane.ERROR_MESSAGE);

        unshowAuxFrameGUI();
    }

    /**
     *  Gathers the <code>Messages</code> error messages
     *  to be displayed.
     *  <p>
     *  Note: if <code>MMJ2FailPopupWindow</code> is
     *        not <code>enabled</code> or not in
     *        <code>startupMode</code> or if the current
     *        RunParm command is <code>VerifyProof</code>
     *        the messages are not accumulated (or shown).
     */
    public void accumStartupErrors() {
        startupErrors = null;
        if (!enabled
            || !startupMode
            || batchFramework
                .isCurrentRunParmCommand(UtilConstants.RUNPARM_VERIFY_PROOF))
            return;

        final Messages messages = batchFramework.outputBoss.getMessages();

        final int msgCount = messages.getErrorMessageCnt();

        if (msgCount == 0)
            return;

        final StringBuffer sb = new StringBuffer(
            messages.getErrorMessageCnt() * 160); // guessing average message
                                                  // length

        final String[] msgArray = messages.getErrorMessageArray();

        for (int i = 0; i < msgCount
            && i < UtilConstants.MAX_STARTUP_ERROR_MESSAGES; i++)
        {
            sb.append(UtilConstants.NEW_LINE_CHAR);
            sb.append(addLineBreaks(msgArray[i]));
            sb.append(UtilConstants.NEW_LINE_CHAR);
        }
        startupErrors = UtilConstants.MMJ2_STARTUP_MSG_LIT_1
            + batchFramework.runParmCnt + UtilConstants.MMJ2_STARTUP_MSG_LIT_2
            + batchFramework.currentRunParmCommand
            + UtilConstants.MMJ2_STARTUP_MSG_LIT_3 + sb.toString();
    }

    /**
     *  Displays a Dialog showing the messages gathered by
     *  <code>accumStartupErrors</code>.
     *  <p>
     *  Note: if <code>MMJ2FailPopupWindow</code> is
     *        not <code>enabled</code> or if no error
     *        messages were gathered the Dialog is not
     *        shown.
     */
    public void displayStartupErrors() {
        if (!enabled || !startupMode || startupErrors == null)
            return;

        showAuxFrameGUI();

        JOptionPane.showMessageDialog(
            auxFrameGUI.getFrame(),
            startupErrors,
            UtilConstants.MMJ2_FAIL_STARTUP_DIALOG_TITLE + " "
                + batchFramework.getRunParmFileAbsolutePath(),
            JOptionPane.ERROR_MESSAGE);

        unshowAuxFrameGUI();
    }

    private String addLineBreaks(final String s) {
        final StringBuffer b = new StringBuffer(s.length() * 10 / 9);
        int unbrokenTextLength = 0;
        int pos = -1;
        boolean firstNonBlankAlreadyOutput = true;
        char c;
        while (++pos < s.length()) {
            c = s.charAt(pos);
            if (c == UtilConstants.NEW_LINE_CHAR) {
                b.append(c);
                unbrokenTextLength = 0;
                firstNonBlankAlreadyOutput = true; // honor leading spaces
                continue;
            }
            if (c == ' ') {
                if (!firstNonBlankAlreadyOutput)
                    // bypass leading space after inserted new line
                    continue;
                // can only insert new line at blank positions
                if (unbrokenTextLength >= UtilConstants.LINE_BREAK_MAX_LENGTH) {
                    b.append(UtilConstants.NEW_LINE_CHAR);
                    unbrokenTextLength = 0;
                    firstNonBlankAlreadyOutput = false;
                    continue;
                }
            }
            b.append(c);
            ++unbrokenTextLength;
            firstNonBlankAlreadyOutput = true;
        }
        return b.toString();
    }

    // need a parent frame otherwise alt-tab while
    // dialog open leaves dialog missing-in-action
    // and no way to continue except to close the
    // command prompt window!
    private void showAuxFrameGUI() {

        auxFrameGUI = new AuxFrameGUI();

        auxFrameGUI.buildFrame();

        // might as well use the advertising space :-)
        auxFrameGUI.changeFrameText(PaConstants.PROOF_ASST_GUI_STARTUP_MSG);

        auxFrameGUI.showFrame(auxFrameGUI.getFrame());
    }

    private void unshowAuxFrameGUI() {
        auxFrameGUI.dispose();
    }

}
